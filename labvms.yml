#!/usr/bin/env ansible-playbook
#
# Examples to call:
#   ./labvms.yml -i inventory.ini
#   ./labvms.yml -i inventory.ini -k -K --private-key ~/.ssh/id_ed25519 
#   ansible all -m ping -i inventory.ini --private-key ~/.ssh/id_ed25519 --limit ansvm1.lab.linder.org  -k -K
# ..or with Ansible Navigator:
#   ansible-navigator run labvms.yml -i inventory.ini --limit anssrv.lab.linder.org, --user dan --private-key ~/.ssh/id_ed25519
#
# On each VM power them up, connect to the .22 address then run these:
# NUM=3
# nmcli con mod ens33 ipv4.address 192.168.65.2${NUM}/24 && hostnamectl set-hostname ansvm${NUM} && reboot
#
---
- name: "Do things on all systems"
  hosts: all
  gather_facts: true

  vars:
    rh_sub_info:
      name: 'dan-5'
      password: 'FRNJA3tSu&r7!63PDV^g'

    ssh_users:
    - name: 'dan'
      key: 'id_ed25519.pub'

  tasks:
  - name: 'Setup .ssh folder'
    file:
      path: '{{ lookup("env","HOME") + "/.ssh/" }}'
      state: directory
      mode: 0700

  - name: 'Setup SSH key on remote systems so local $USER can SSH in without password'
    ansible.posix.authorized_key:
      user: '{{ item.name }}'
      key: '{{ lookup("file", lookup("env", "HOME") + "/.ssh/" + item.key ) }}'
      state: present
    loop: '{{ ssh_users }}'

  - name: "Set hostname"
    ansible.builtin.hostname:
      name: '{{ inventory_hostname }}'
    become: true
    
  - name: 'Adjust so $USER on remote system can "sudo" without password'
    lineinfile:
      path: '/etc/sudoers.d/{{ item.name }}'
      state: present
      line:  '{{ item.name }} ALL=(ALL) NOPASSWD: ALL'
      create: True
      mode: 0640
      owner: root
      group: root
      validate: '/usr/sbin/visudo -cf %s'
    become: true
    #become_method: su
    loop: '{{ ssh_users }}'

  - name: "Ensure Red Hat Subscription setup"
    # subscription-manager register --username dan-5 --password '[[redacted]]' --auto-attach
    community.general.redhat_subscription:
      state: present
      username: '{{ rh_sub_info.name }}'
      password: '{{ rh_sub_info.password }}'
      syspurpose:
        usage: "Development/Test"
        role: "Red Hat Enterprise Linux Server"
        service_level_agreement: "Self-Support"
        sync: yes
        #force_register: true
      auto_attach: true
    become: true

  - name: 'Patch up the systems'
    package:
      name: '*'
      state: latest
    notify: reboot
    become: true

  handlers:
  - name: reboot
    reboot:
      msg: "Reboot initiated by Ansible" # not required. Message to display to users before reboot.
    become: true
    when:
    -  not ansible_env['SSH_CLIENT'] | regex_search(ansible_facts.all_ipv4_addresses[0])
    -  not ansible_env['SSH_CLIENT'] | regex_search(ansible_facts.all_ipv4_addresses[1] | default(ansible_facts.all_ipv4_addresses[0]))
    -  not ansible_env['SSH_CLIENT'] | regex_search(ansible_facts.all_ipv4_addresses[2] | default(ansible_facts.all_ipv4_addresses[0]))
    -  not ansible_env['SSH_CLIENT'] | regex_search(ansible_facts.all_ipv4_addresses[3] | default(ansible_facts.all_ipv4_addresses[0]))


