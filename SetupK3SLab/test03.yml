#!/usr/bin/env ansible-playbook
# ansible-galaxy collection install community.vmware
---
- hosts: localhost
  gather_facts: true
  tasks:
  - name: "Bring in HTTPD server info"
    set_fact:
      httpd_ip: "{{ ansible_facts.default_ipv4.address }}"
      httpd_port: 80

  - name: "Build VM objects"
    community.vmware.vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      validate_certs: no
      folder: /
      name: "{{ item.name }}"
      state: poweredon
      guest_id: "{{ item.guest_id }}"
      esxi_hostname: "{{ esxi_hostname }}"
      cdrom:
      - type: iso
        state: present
        iso_path: "{{ item.iso }}"
        controller_number: 0
        unit_number: 0
      disk:
      - size_gb: "{{ item.HDD.size }}"
        type: thin
        datastore: "{{ item.HDD.datastore }}"
      hardware:
        memory_mb: "{{ item.RAM }}"
        num_cpus: "{{ item.CPUs }}"
        scsi: paravirtual
        boot_firmware: "bios"
      networks:
      - name: "{{ item.nics[0].nicname }}"
        mac: "{{ item.nics[0].mac }}"
        ip: "{{ item.nics[0].address }}"
        netmask: "{{ item.nics[0].netmask }}"
        device_type: vmxnet3
      - name: "{{ item.nics[1].nicname | default(omit) }}"
        mac: "{{ item.nics[1].mac | default(omit) }}"
        ip: "{{ item.nics[1].address | default(omit) }}"
        netmask: "{{ item.nics[1].netmask | default(omit) }}"
        device_type: vmxnet3
      wait_for_ip_address: no
    #delegate_to: localhost
    register: deploy_vm
    loop: "{{ vminfo }}"
    loop_control:
      label: "{{ item.name }}"

  - name: "Setup kickstart files"
    template:
      src: "./templates/{{ item.kickstart_template }}"
      dest: "/var/www/html/{{ item.kickstart_file }}"
      owner: apache
      group: apache
      mode: '0644'
    become: true
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

  - name: "Send boot configuration"
    community.vmware.vmware_guest_sendkey:
      validate_certs: no
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      name: "{{ item.name }}"
      keys_send:
        - ESC
        - ESC
      string_send: "{{ item.boot_string | replace('_HTTPD_IP_',httpd_ip) | replace('_HTTPD_PORT_',httpd_port) }}"
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

  - name: "Start boot from ISO"
    community.vmware.vmware_guest_sendkey:
      validate_certs: no
      hostname: "{{ vcenter_hostname }}"
      username: "{{ vcenter_username }}"
      password: "{{ vcenter_password }}"
      name: "{{ item.name }}"
      keys_send:
        - ENTER
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

  - name: "Clean up local known hosts"
    known_hosts:
      path: /home/dan/.ssh/known_hosts
      state: absent
      name: "{{ item.nics[0].address }}"
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

  - name: "Wait for SSH to come up"
    wait_for:
      port: 22
      host: '{{ item.nics[0].address }}'
      timeout: 900
    connection: local
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

  - name: "Add new hosts"
    add_host:
      name: "{{ item.name }}"
      ansible_host: "{{ item.nics[0].address }}"
      ansible_user: root
      ansible_password: "{{ root_passwd }}"
      groups: "{{ item.in_group }}"
    loop: '{{ vminfo }}'
    loop_control:
      label: "{{ item.name }}"

- hosts: services #newvms
  gather_facts: true
  remote_user: vagrant

  tasks:
  - name: "Ping new hosts"
    ping:
