#!/usr/bin/ansible-playbook
#
# Ensure the roles are downloaded using the requirements.yml:
#   ansible-galaxy install -r roles/requirements.yml # -p ./roles/
#
# Make sure your account on each inventory has this users ssh key
#   ssh-copy-id -i ~/.ssh/id_ed25519.pub ${USER}@[target]
#
# Add/update the sudo password in the password.yml file
#   ansible-vault create password.yml
#   # Enter new vault password for this file
#   # This will be stored in "vault_password" file later
#   ansible-vault edit password.yml
#   # Enter the vault password used for this file
#   # Add and/or correct the "" variable.
#   ansible_become_password: "MyPasswordHere"
#
# Store that vault password in the "vault_password" file
#   NOTE: Do NOT check this file into a repo
#
# Then run like this:
#   ./main.yml -i inventory.ini --extra-vars '@password.yml' --vault-password-file=vault_password
# Or
#   script setup-$(date +%y%m%d-%H%M%S).out -c "./main.yml --extra-vars '@password.yml' --vault-password-file=vault_password"
#
---
- hosts: all
  gather_facts: true

  vars:
    rebootem: false

  tasks:
  - name: Store user name
    become: false
    set_fact:
      username_on_remote: "{{ ansible_user_id }}"

  - name: Setup passwordless sudo
    become: true
    lineinfile:
      path: /etc/sudoers
      state: present
      line: "{{ username_on_remote }} ALL=(ALL) NOPASSWD:ALL"
      validate: /usr/sbin/visudo -cf %s

  - name: Setup hostname
    include_role:
      name: fqdn
      apply:
        become: true
    vars:
      fqdn: "{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname_short }}"

  - name: Setup automatic updates
    become: true
    package:
      state: installed
      name:
      - dnf-automatic

# Add handy programs
  - name: Setup commonly handy packages on Linux
    become: true
    package:
      state: installed
      name:
      - tmux
      - vim
      - ansible
      - ansible-lint
      - nmap
      - git
      - cockpit
      - sos-collector
      - nc
      - fuse-exfat
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  handlers:
  - name: do_reboot
    become: true
    reboot:
    when: rebootem

- hosts: base_hosts
  gather_facts: true

  vars:
    rebootem: false

  tasks:
#  - name: Setup hostname
#    include_role:
#      name: fqdn
#      apply:
#        become: true
#    vars:
#      fqdn: "{{ inventory_hostname }}"
#      hostname: "{{ inventory_hostname_short }}"

# Setup Cockpit on RedHat systems
  - name: Setup cockpit packages - RedHat
    become: true
    package:
      state: installed
      name:
      - cockpit-composer
      - cockpit-machines
      - cockpit-pcp
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  - name: Setup cockpit packages - RedHat 7+ and Fedora
    become: true
    package:
      state: installed
      name:
      - podman
    when:
    - ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 7
    notify: do_reboot

  - name: Setup cockpit packages - Fedora
    become: true
    package:
      state: installed
      name:
      - cockpit-podman
    when:
    - ansible_distribution == 'Fedora' and ansible_distribution_major_version|int >= 30
    notify: do_reboot

# Setup for virtual machine work
  - name: Setup KVM and plugins
    become: true
    package:
      state: installed
      name:
      - qemu-kvm
      - libvirt
      - libvirt-python
      - libguestfs-tools
      - virt-install
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  - name: Setup KVM and plugins
    become: true
    package:
      state: installed
      name:
      - qemu-kvm
      - libvirt-daemon-system
      - python-libvirt
      - libguestfs-tools
      - virtinst
    when: ansible_os_family == 'Debian'
    notify: do_reboot

  - name: Enable and start SSH services
    become: true
    service:
      enabled: yes
      state: started
      name: sshd.service

  - name: Enable and start Cockpit services
    become: true
    service:
      enabled: yes
      state: started
      name: "{{ item }}"
    with_items:
      - cockpit.socket
      - cockpit
    when: ansible_os_family == 'RedHat'

  - name: Enable and start KVM services
    become: true
    service:
      enabled: yes
      state: started
      name: libvirtd

# Setup for podman work
  - name: Setup podman and cockpit plugins
    become: true
    package:
      state: installed
      name:
        - podman-manpages
        - podman-tests
        - pcp-pmda-podman
    notify: do_reboot
    when:
    - ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8  ) or
      ( ansible_os_family == 'Fedora' and ansible_distribution_major_version|int >= 30 )


  - name: Enable and start podman services
    become: true
    service:
      enabled: yes
      state: started
      name: io.podman
    when:
    - ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8  ) or
      ( ansible_os_family == 'Fedora' and ansible_distribution_major_version|int >= 30 )

# Setup for image building
  - name: Install Image Builder and cockpit plugins
    become: true
    package:
      state: installed
      name:
      - lorax-composer
      - composer-cli
      - bash-completion
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  - name: Enable and start services
    become: true
    service:
      enabled: yes
      state: started
      name: lorax-composer.socket
    when: ansible_os_family == 'RedHat'

  handlers:
  - name: do_reboot
    become: true
    reboot:
    when: rebootem

- hosts: workstations
  gather_facts: true

  vars:
    rebootem: false

  tasks:
  # Setup X11 on Wayland systems
  # https://docs.fedoraproject.org/en-US/quick-docs/configuring-xorg-as-default-gnome-session/
  #   /etc/gdm/custom.conf
  #   Set "WaylandEnable=false"
  #   In "[daemon]" section, set "DefaultSession=gnome-xorg.desktop"

  - name: Install backgrounds for workstations
    become: true
    package:
      state: installed
      name:
      - ffmpeg
      - gnome-backgrounds
      - gnome-backgrounds-extras
      - f21-backgrounds-gnome
      - f22-backgrounds-gnome
      - f23-backgrounds-gnome
      - f24-backgrounds-gnome
      - f25-backgrounds-gnome
      - f26-backgrounds-gnome
      - f27-backgrounds-gnome
      - f28-backgrounds-gnome
      - f29-backgrounds-gnome
      - f30-backgrounds-gnome
      - f21-backgrounds-extras-gnome
      - f22-backgrounds-extras-gnome
      - f23-backgrounds-extras-gnome
      - f24-backgrounds-extras-gnome
      - f25-backgrounds-extras-gnome
      - f26-backgrounds-extras-gnome
      - f27-backgrounds-extras-gnome
      - f28-backgrounds-extras-gnome
      - f29-backgrounds-extras-gnome
      - f30-backgrounds-extras-gnome
      - f26-backgrounds-animated
      - f29-backgrounds-animated
      - f30-backgrounds-animated

#  - name: Setup handy patching sudoers entry
#    become: true
#    lineinfile:
#      file: /etc/sudoers
#      line: %wheel localhost=/home/dan/bin/doup -y

  handlers:
  - name: do_reboot
    become: true
    reboot:
    when: rebootem

- hosts: all
  gather_facts: true

  tasks:
  - name: Update all packages
    become: true
    package:
      name: "*"
      state: latest
    notify: do_reboot

  handlers:
  - name: do_reboot
    become: true
    reboot:


