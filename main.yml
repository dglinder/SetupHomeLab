#!/usr/bin/ansible-playbook
#
# Ensure the roles are downloaded using the requirements.yml:
#   ansible-galaxy install -r roles/requirements.yml # -p ./roles/
#
# Make sure your account on each inventory has this users ssh key
#   ssh-copy-id -i ~/.ssh/id_ed25519.pub ${USER}@[target]
#
# Add/update the sudo password in the password.yml file
#   ansible-vault create password.yml
#   # Enter new vault password for this file
#   # This will be stored in "vault_password" file later
#   ansible-vault edit password.yml
#   # Enter the vault password used for this file
#   # Add and/or correct the "" variable.
#   ansible_become_password: "MyPasswordHere"
#
# Store that vault password in the "vault_password" file
#   NOTE: Do NOT check this file into a repo
#
# Then run like this:
#   ./main.yml -i inventory.ini --extra-vars '@password.yml' --vault-password-file=vault_password
# Or
#   script setup-$(date +%y%m%d-%H%M%S).out -c "./main.yml --extra-vars '@password.yml' --vault-password-file=vault_password"
#
---
- hosts: all
  gather_facts: true

  vars:
    rebootem: false
    packages:
      RedHat:
        RedHat:
          '7':
            - package_A
        Fedora:
          '32':
            - package_B

  tasks:
  - name: Show ansible_os_family / ansible_distribution / ansible_distribution_major_version
    debug:
      msg: "{{ ansible_os_family }} / {{ ansible_distribution }} / {{ ansible_distribution_major_version }}"

  - name: Store user name
    become: false
    set_fact:
      username_on_remote: "{{ ansible_user_id }}"

  - name: Setup passwordless sudo
    become: true
    lineinfile:
      path: /etc/sudoers
      state: present
      line: "{{ username_on_remote }} ALL=(ALL) NOPASSWD:ALL"
      validate: /usr/sbin/visudo -cf %s

  - name: Setup hostname
    include_role:
      name: fqdn
      apply:
        become: true
    vars:
      fqdn: "{{ inventory_hostname }}"
      hostname: "{{ inventory_hostname_short }}"

  - name: Setup automatic updates
    become: true
    package:
      state: installed
      name:
      - dnf-automatic
    when:
      - ansible_os_family == 'RedHat'
      - ansible_distribution_major_version|int >= 8

  - name: "Install EPEL - {{ ansible_distribution }} . {{ ansible_os_family }}"
    become: true
    package:
      state: installed
      name:
      - "https://dl.fedoraproject.org/pub/epel/epel-release-latest-{{ ansible_distribution_major_version }}.noarch.rpm"
    register: install_epel
    when:
      - ansible_distribution == 'RedHat'
      - ansible_os_family == 'RedHat'

  - name: "Ensure RedHat 8 has the repositores setup"
    become: true
    rhsm_repository:
      name:
        - "ansible-2-for-rhel-{{ ansible_distribution_major_version }}-x86_64-rpms" # Red Hat Ansible Engine 2 for RHEL 8 x86_64
      state: enabled
    when:
      - ansible_os_family == 'RedHat'
      - ansible_distribution == 'RedHat'
      - ansible_distribution_major_version|int == 8
    register: install_repos

  - name: "Ensure RedHat 7 has the repositores setup"
    become: true
    rhsm_repository:
      name:
        - "rhel-{{ ansible_distribution_major_version }}-server-extras-rpms"
        - "rhel-server-rhscl-{{ ansible_distribution_major_version }}-rpms"
        - "rhel-{{ ansible_distribution_major_version }}-server-ansible-2.9-rpms"
      state: enabled
    when:
      - ansible_os_family == 'RedHat'
      - ansible_distribution == 'RedHat'
      - ansible_distribution_major_version|int == 7
    register: install_repos

  - name: Update repository cache
    become: true
    yum:
      update_cache: yes
    when:
      - install_epel is changed or install_repos is changed

# Add handy programs
  - name: Setup commonly handy packages on Linux
    become: true
    package:
      state: installed
      name:
      - tmux
      - vim
      - ansible
      - nmap
      - git
      - sos-collector
      - nc
      - ansible-lint
      - figlet
      - rh-python36-PyYAML
      - rh-python36-python-pip
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  handlers:
  - name: do_reboot
#    become: true
    reboot:
    when: rebootem

- hosts: base_hosts
  gather_facts: true

  vars:
    rebootem: false
    container_namespace: 10000

  tasks:
# Setup Cockpit on RedHat systems
  - name: Setup cockpit packages - RedHat 8
    become: true
    package:
      state: installed
      name:
      - cockpit
      - cockpit-composer
      - cockpit-machines
      - cockpit-pcp
    when:
      - ansible_os_family == 'RedHat'
      - ansible_distribution_major_version|int == 8
    notify: do_reboot

  - name: Setup cockpit packages - RedHat 7
    become: true
    package:
      state: installed
      name:
      - cockpit
      - cockpit-system
      - cockpit-bridge
      - cockpit-ws
      - cockpit-dashboard
      - cockpit-machines
      - cockpit-docker
      - cockpit-system
    when:
      - ansible_os_family == 'RedHat'
      - ansible_distribution_major_version|int == 7
    notify: do_reboot

  - name: Open up Cockpit server firewall ports
    become: true
    firewalld:
      port: 9090/tcp
      state: enabled
      permanent: yes
    notify: reload_firewall

  - name: Setup cockpit container packages - RedHat 7+ and Fedora
    become: true
    package:
      state: installed
      name:
      - podman
#      - podman-docker  # Conflicts with docker which cockpit brings in
    when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version|int >= 7
    notify: do_reboot

  - name: Setup namespaces system control
    become: true
    sysctl:
      name: "user.max_user_namespaces"
      value: "{{ container_namespace }}"
      state: present
#    notify: Restart_services
    
  - name: Setup cockpit packages - Fedora
    become: true
    package:
      state: installed
      name:
      - cockpit-podman
    when:
    - ansible_distribution == 'Fedora'
    - ansible_distribution_major_version|int >= 30
    notify: do_reboot

# Setup for virtual machine work
  - name: Setup KVM and plugins
    become: true
    package:
      state: installed
      name:
      - qemu-kvm
      - libvirt
      - libvirt-python
      - libguestfs-tools
      - virt-install
    when:
      - ansible_os_family == 'RedHat'
    notify: do_reboot

  - name: Setup KVM and plugins
    become: true
    package:
      state: installed
      name:
      - qemu-kvm
      - libvirt-daemon-system
      - python-libvirt
      - libguestfs-tools
      - virtinst
    when: 
      - ansible_os_family == 'Debian'
    notify: do_reboot

  - name: Enable and start SSH services
    become: true
    service:
      enabled: yes
      state: started
      name: sshd.service

  - name: Enable and start Cockpit services
    become: true
    service:
      enabled: yes
      state: started
      name: "{{ item }}"
    with_items:
      - cockpit.socket
      - cockpit
    when: 
      - ansible_os_family == 'RedHat'

  - name: Enable and start KVM services
    become: true
    service:
      enabled: yes
      state: started
      name: libvirtd

# Setup for podman work
  - name: Setup podman and cockpit plugins
    become: true
    package:
      state: installed
      name:
        - podman-manpages
        - podman-tests
        - pcp-pmda-podman
    notify: do_reboot
    when:
    - ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8  ) or
      ( ansible_os_family == 'Fedora' and ansible_distribution_major_version|int >= 30 )


  - name: Enable and start podman services
    become: true
    service:
      enabled: yes
      state: started
      name: io.podman
    when:
    - ( ansible_os_family == 'RedHat' and ansible_distribution_major_version|int >= 8  ) or
      ( ansible_os_family == 'Fedora' and ansible_distribution_major_version|int >= 30 )

# Setup for image building
  - name: Install Image Builder and cockpit plugins
    become: true
    package:
      state: installed
      name:
      - lorax-composer
      - composer-cli
      - bash-completion
    when: ansible_os_family == 'RedHat'
    notify: do_reboot

  - name: Enable and start services
    become: true
    service:
      enabled: yes
      state: started
      name: lorax-composer.socket
    when: ansible_os_family == 'RedHat'

  - name: Setup @reboot script
    become: true
    template:
      src: templates/onboot.sh.j2
      dest: /usr/local/bin/onboot.sh
      mode: u=rwx,g=rx,o=rx
      owner: root
      group: root

  - name: Setup @reboot cron entry
    become: true
    cron:
      name: "Setup reboot entry"
      special_time: reboot
      job: "sleep 120 && /usr/local/bin/onboot.sh"

  - name: Setup @hourly  cron entry
    become: true
    cron:
      name: "Setup hourly entry"
      special_time: hourly
      job: "/usr/local/bin/onboot.sh"

  handlers:
  - name: do_reboot
#    become: true
    reboot:
    when: rebootem

  - name: reload_firewall
    systemd:
      name: firewalld
      state: reloaded

- hosts: workstations
  gather_facts: true

  vars:
    rebootem: false

  tasks:
  # Setup X11 on Wayland systems
  # https://docs.fedoraproject.org/en-US/quick-docs/configuring-xorg-as-default-gnome-session/
  #   /etc/gdm/custom.conf
  #   Set "WaylandEnable=false"
  #   In "[daemon]" section, set "DefaultSession=gnome-xorg.desktop"

  - name: Install backgrounds for workstations
    become: true
    package:
      state: installed
      name:
      - ffmpeg
      - gnome-backgrounds
      - gnome-backgrounds-extras
      - f21-backgrounds-gnome
      - f22-backgrounds-gnome
      - f23-backgrounds-gnome
      - f24-backgrounds-gnome
      - f25-backgrounds-gnome
      - f26-backgrounds-gnome
      - f27-backgrounds-gnome
      - f28-backgrounds-gnome
      - f29-backgrounds-gnome
      - f30-backgrounds-gnome
      - f21-backgrounds-extras-gnome
      - f22-backgrounds-extras-gnome
      - f23-backgrounds-extras-gnome
      - f24-backgrounds-extras-gnome
      - f25-backgrounds-extras-gnome
      - f26-backgrounds-extras-gnome
      - f27-backgrounds-extras-gnome
      - f28-backgrounds-extras-gnome
      - f29-backgrounds-extras-gnome
      - f30-backgrounds-extras-gnome
      - f26-backgrounds-animated
      - f29-backgrounds-animated
      - f30-backgrounds-animated

#  - name: Setup handy patching sudoers entry
#    become: true
#    lineinfile:
#      file: /etc/sudoers
#      line: %wheel localhost=/home/dan/bin/doup -y

  handlers:
  - name: do_reboot
#    become: true
    reboot:
    when: rebootem

- hosts: all
  gather_facts: true

  tasks:
  - name: Update all packages
    become: true
    package:
      name: "*"
      state: latest
    notify: do_reboot

  handlers:
  - name: do_reboot
#    become: true
    reboot:
    when: rebootem


